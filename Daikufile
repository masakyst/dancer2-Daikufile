
use lib 'lib';
use YAML;
use Template;
use Data::Dumper;

# add parameters, enviroments/production.yml
# deploy app server directory
#appdir: /home/masakyst/app/HelloWorld
#user: masakyst
#group: masakyst
#psgifile: app.psgi
#port: 5000
#perl_version: perl-5.18
#perlbrew_home: /home/masakyst

package TemporaryDancerConfig { use Moo; with 'Dancer2::Core::Role::ConfigReader'; };

my $DANCER_CONFIG = TemporaryDancerConfig->new;


namespace dancer2 => sub {
    desc 'dancer2 scaffold';
    task scaffold => sub {
        # 未実装
    };  
};

namespace create => sub {

    desc 'create app.psgi (remove bin/app.pl)';
    task psgi => sub {
        {
            open my $fh, '>', 'app.psgi' or die qw/Can't open file: $!/;
            print $fh sprintf("use %s; %s->dance;", 
                $DANCER_CONFIG->config->{appname},
                $DANCER_CONFIG->config->{appname}
            );
            close $fh;
            unlink './bin/app.pl';
        }
        {
            open my $fh, '>', './bin/.gitkeep' or die qw/Can't open file: $!/;
            close $fh;
        }
        unless (-e 'cpanfile') {
            sh q(curl -s -o cpanfile https://raw.githubusercontent.com/masakyst/dancer2-Daikufile/master/cpanfile);
        } 
    };

    desc 'create deploy.pl (cinnamon --config)';
    task deploypl => sub {
        unless (-e './deploy.pl') {
            sh q(curl -s -o deploy.pl https://raw.githubusercontent.com/masakyst/dancer2-Daikufile/master/deploy.pl);
        }       
    };    

    desc 'create init.d script [PLACK_ENV]';
    task initd => sub {
        $ENV{PLACK_ENV} or die "PLACK_ENV=...";
        my $tt = Template->new;
        my $config = $DANCER_CONFIG->config;
        $config->{plack_env} = $DANCER_CONFIG->environment;
        ($config->{prog_name} = lc $config->{appname}) =~ s/::/\-/;
        # initdのtemplate
        {
            my $output_script;
            unless (-e 'init.d/'.$config->{prog_name}) {
                sh q(mkdir -p init.d);
                sh q(curl -s -o init.d/script.tt https://raw.githubusercontent.com/masakyst/centos-initd-psgi-template/master/script.tt);
                $tt->process('init.d/script.tt', $config, \$output_script);
                open my $fh, '>', 'init.d/'.$config->{prog_name} or die qw/Can't open file: $!/;
                print $fh $output_script;
                close $fh;
                sh q(rm init.d/script.tt);
                sh qq(chmod +x init.d/$config->{prog_name});
            }
        }
        # logrotateのtemplate
        {
            my $output_logrotate;
            unless (-e 'logrotate.d/'.$config->{prog_name}) {
                sh q(mkdir -p logrotate.d);
                sh q(curl -s -o logrotate.d/logrotate.tt https://raw.githubusercontent.com/masakyst/centos-initd-psgi-template/master/logrotate.tt);
                $tt->process('logrotate.d/logrotate.tt', $config, \$output_logrotate);
                open my $fh, '>', 'logrotate.d/'.$config->{prog_name} or die qw/Can't open file: $!/;
                print $fh $output_logrotate;
                close $fh;
                sh q(rm logrotate.d/logrotate.tt);
            }
        }
        # 環境settingファイル生成
        {
            my $output_setting;
            unless (-e 'init.d/setting') {
                sh q(mkdir -p init.d);
                sh q(curl -s -o init.d/setting.tt https://raw.githubusercontent.com/masakyst/centos-initd-psgi-template/master/setting.tt);
                $tt->process('init.d/setting.tt', $config, \$output_setting);
                open my $fh, '>', 'init.d/setting' or die qw/Can't open file: $!/;
                print $fh $output_setting;
                close $fh;
                sh qq(chmod +x init.d/setting);
                sh q(rm init.d/setting.tt);
            }
        }
    };
};

namespace deploy => sub {

    my @delegate_cinnamon_tasks = (
        ['install', 'アプリをサーバに配置 [PLACK_ENV]'],
        ['start',   'アプリを起動         [PLACK_ENV]'],
        ['stop',    'アプリを停止         [PLACK_ENV]'],
        ['restart', 'アプリを再起動       [PLACK_ENV]'],
        ['status',  'アプリの状態を確認   [PLACK_ENV]'],
        ['update',  'アプリのソースを更新 [PLACK_ENV]'],
    );
    for my $task (@delegate_cinnamon_tasks) {
        desc $task->[1];
        task $task->[0] => sub {
            $ENV{PLACK_ENV} or die "PLACK_ENV=...";
            sh qq(PLACK_ENV=$ENV{PLACK_ENV} carton exec cinnamon --config=deploy.pl $ENV{PLACK_ENV} $task->[0]);
        };    
    }

};

